[{"/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/index.tsx":"1","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/utils/reportWebVitals.ts":"2","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/DockernetesModule.tsx":"3","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/store/store.ts":"4","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/store/rootReducer.ts":"5","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/containers/Router.tsx":"6","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/features/home/HomeSlice.ts":"7","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/containers/App.tsx":"8","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/containers/HomePage.tsx":"9","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/components/NavigationBar.tsx":"10","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/components/LoadingScreen.tsx":"11","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/features/home/Home.tsx":"12","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/components/ContainerListItem.tsx":"13"},{"size":881,"mtime":1611982248182,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1611822231897,"results":"16","hashOfConfig":"15"},{"size":546,"mtime":1611980605356,"results":"17","hashOfConfig":"15"},{"size":1330,"mtime":1612075577525,"results":"18","hashOfConfig":"15"},{"size":343,"mtime":1611979823354,"results":"19","hashOfConfig":"15"},{"size":859,"mtime":1611980493749,"results":"20","hashOfConfig":"15"},{"size":1803,"mtime":1611979823338,"results":"21","hashOfConfig":"15"},{"size":244,"mtime":1611822231897,"results":"22","hashOfConfig":"15"},{"size":157,"mtime":1611888279231,"results":"23","hashOfConfig":"15"},{"size":2730,"mtime":1611979823349,"results":"24","hashOfConfig":"15"},{"size":416,"mtime":1611848875100,"results":"25","hashOfConfig":"15"},{"size":1717,"mtime":1616214063232,"results":"26","hashOfConfig":"15"},{"size":1867,"mtime":1616288293823,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"12y6c6c",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"30"},{"filePath":"64","messages":"65","errorCount":1,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/index.tsx",[],[],"/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/utils/reportWebVitals.ts",["66"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/DockernetesModule.tsx",["67"],"import React from 'react';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Provider } from 'react-redux';\nimport { History } from 'history';\nimport { Store } from './store/store';\nimport ApplicationRouter from './containers/Router';\n\ninterface RootProps {\n  store: Store;\n  history: History;\n}\n\nconst DockernetesModule = (props: RootProps) => (\n  <Provider store={props.store}>\n    <ConnectedRouter history={props.history}>\n      <ApplicationRouter />\n    </ConnectedRouter>\n  </Provider>\n);\n\nexport default DockernetesModule;\n","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/store/store.ts",["68","69"],"import { Action, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { routerMiddleware } from 'connected-react-router';\nimport { createHashHistory } from 'history';\nimport { createLogger } from 'redux-logger';\nimport { ThunkAction } from 'redux-thunk';\nimport createRootReducer from './rootReducer';\nimport LogRocket from 'logrocket';\n\nexport const history = createHashHistory();\nconst router = routerMiddleware(history);\nconst middleware = [\n  ...getDefaultMiddleware(),\n  router,\n  LogRocket.reduxMiddleware(),\n];\n\nconst rootReducer = createRootReducer(history);\n\nconst excludeLoggerEnvs = ['test', 'production'];\nconst shouldIncludeLogger = !excludeLoggerEnvs.includes(\n  process.env.NODE_ENV || '',\n);\n\nif (shouldIncludeLogger) {\n  const logger = createLogger({\n    level: 'info',\n    collapsed: true,\n  });\n  middleware.push(logger);\n}\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const configuredStore = (initialState?: RootState) => {\n  return configureStore({\n    preloadedState: initialState,\n    reducer: rootReducer,\n    middleware: middleware,\n  });\n};\n\nexport const getCurrentPathname = (state: RootState) =>\n  state.router.location.pathname;\nexport type Store = ReturnType<typeof configuredStore>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>;\n","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/store/rootReducer.ts",["70"],"import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport { History } from 'history';\nimport homeReducer from '../features/home/HomeSlice';\n\nexport default function createRootReducer(history: History) {\n  return combineReducers({\n    router: connectRouter(history),\n    home: homeReducer,\n  });\n}\n","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/containers/Router.tsx",["71","72","73","74"],"import React from 'react';\nimport LoadingScreen from '../components/LoadingScreen';\nimport App from './App';\nimport Navigation from '../components/NavigationBar';\nimport { Route, Switch } from 'react-router-dom';\nimport route from '../constants/routes.json';\n\nexport default class ApplicationRouter extends React.PureComponent {\n  LazyLoadingScreen = (name: string) => <LoadingScreen name={name} />;\n  LazyHomeContainer = React.lazy(() => import('./HomePage'));\n\n  HomePage = (props: Record<string, any>) => (\n    <React.Suspense fallback={this.LazyLoadingScreen}>\n      <this.LazyHomeContainer {...props} />\n    </React.Suspense>\n  );\n\n  public render() {\n    return (\n      <App>\n        <Navigation isLoading={false} />\n        <Switch>\n          <Route exact path={route.HOME.path} component={this.HomePage} />\n        </Switch>\n      </App>\n    );\n  }\n}\n","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/features/home/HomeSlice.ts",["75","76"],"import { createSlice } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../store/store';\n\nexport enum Status {\n  ON,\n  DEGRADED,\n  OFF,\n}\n\nconst homeSlice = createSlice({\n  name: 'home',\n  initialState: {\n    dockerStatus: Status.OFF,\n    apiStatus: Status.OFF,\n  },\n  reducers: {\n    dockerReady: (state) => {\n      state.dockerStatus = Status.ON;\n    },\n    dockerDegraded: (state) => {\n      state.dockerStatus = Status.DEGRADED;\n    },\n    dockerOff: (state) => {\n      state.dockerStatus = Status.OFF;\n    },\n    apiOn: (state) => {\n      state.dockerStatus = Status.OFF;\n    },\n    apiDegraded: (state) => {\n      state.dockerStatus = Status.OFF;\n    },\n    apiOff: (state) => {\n      state.dockerStatus = Status.OFF;\n    },\n  },\n});\n\nexport const checkApiStatus = (): AppThunk => {\n  return async (dispatch) => {\n    const response = await fetch('http://localhost:8080/api/v1/ping');\n    if (!response.ok) {\n      dispatch(apiOff());\n    } else if (response.status >= 300 && response.status < 500) {\n      dispatch(apiDegraded());\n    } else {\n      dispatch(apiOn());\n    }\n  };\n};\n\nexport const checkDockerStatus = (): AppThunk => {\n  return async (dispatch) => {\n    const response = await fetch('http://localhost:8080/api/v1/status');\n    if (!response.ok || response.status > 500) {\n      dispatch(dockerOff());\n    } else if (response.status >= 300 && response.status < 500) {\n      dispatch(dockerDegraded());\n    } else {\n      dispatch(dockerReady());\n    }\n  };\n};\n\nexport const {\n  dockerReady,\n  dockerDegraded,\n  dockerOff,\n  apiOn,\n  apiDegraded,\n  apiOff,\n} = homeSlice.actions;\n\nexport default homeSlice.reducer;\n\nexport const getDockerStatus = (state: RootState) => state.home.dockerStatus;\nexport const getApiStatus = (state: RootState) => state.home.apiStatus;\n","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/containers/App.tsx",["77","78"],"import React, { ReactNode } from 'react';\nimport { Classes } from '@blueprintjs/core';\n\ntype AppProps = {\n  children: ReactNode;\n};\n\nexport default function App(props: AppProps) {\n  const { children } = props;\n  return <div>{children}</div>;\n}\n","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/containers/HomePage.tsx",["79"],"import React from 'react';\nimport HomeContainer from '../features/home/Home';\n\nfunction HomePage() {\n  return <HomeContainer />;\n}\n\nexport default HomePage;\n","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/components/NavigationBar.tsx",["80","81"],"import React, { ReactElement, useEffect } from 'react';\nimport {\n  Alignment,\n  Button,\n  Classes,\n  Navbar,\n  NavbarDivider,\n  NavbarGroup,\n  NavbarHeading,\n  Tag,\n  Colors,\n} from '@blueprintjs/core';\n\nimport routes from '../constants/routes.json';\nimport { Link } from 'react-router-dom';\nimport { getCurrentPathname } from '../store/store';\nimport { useSelector } from 'react-redux';\nimport {\n  checkApiStatus,\n  checkDockerStatus,\n  getApiStatus,\n  getDockerStatus,\n} from '../features/home/HomeSlice';\nimport { statusColor, message } from '../features/home/Home';\n\ninterface INavigationItemProps {\n  route: string;\n  name: string;\n  classNames: string;\n  currentLocation: string;\n}\n\nconst NavigationItem = (props: INavigationItemProps): ReactElement => {\n  const { route, classNames, name, currentLocation } = props;\n  const isCurrent = currentLocation == route;\n  console.log(isCurrent);\n  return (\n    <>\n      <Link to={route}>\n        <Button\n          text={name}\n          minimal\n          className={classNames}\n          style={{ color: Colors.GRAY5 }}\n          active={isCurrent}\n        />\n      </Link>\n    </>\n  );\n};\n\ninterface NavigationBarProps {\n  isLoading: boolean;\n}\n\nfunction Navigation(props: NavigationBarProps): ReactElement {\n  useEffect(() => {\n    checkApiStatus();\n    checkDockerStatus();\n  });\n\n  const { isLoading } = props;\n  const elementIsLoading = isLoading ? Classes.SKELETON : '';\n  const currentPage = useSelector(getCurrentPathname);\n  const dockerStatus = useSelector(getDockerStatus);\n  const apiStatus = useSelector(getApiStatus);\n\n  const leftMenuRoutes = [\n    routes.HOME,\n    routes.CONTAINERS,\n    routes.CREATE_CONTAINERS,\n    routes.IMAGES,\n  ];\n\n  const LeftMenuItems = leftMenuRoutes.map((item, id) => (\n    <NavigationItem\n      key={id}\n      route={item.path}\n      name={item.title}\n      classNames={elementIsLoading}\n      currentLocation={currentPage}\n    />\n  ));\n\n  const rightMenuRoutes = [routes.SETTINGS];\n  const RightMenuItems = rightMenuRoutes.map((item, id) => (\n    <NavigationItem\n      key={id}\n      route={item.path}\n      name={item.title}\n      classNames={elementIsLoading}\n      currentLocation={currentPage}\n    />\n  ));\n\n  const ConnectionStatus = (\n    <>\n      <Tag intent={statusColor(dockerStatus)} />\n      <br />\n      <Tag intent={statusColor(apiStatus)} />\n    </>\n  );\n\n  return (\n    <Navbar className={Classes.DARK}>\n      <NavbarGroup align={Alignment.LEFT}>\n        <NavbarHeading className={elementIsLoading}>Dockernetes</NavbarHeading>\n        <NavbarDivider />\n        {LeftMenuItems}\n      </NavbarGroup>\n      <NavbarGroup align={Alignment.RIGHT}>{RightMenuItems}</NavbarGroup>\n    </Navbar>\n  );\n}\n\nexport default Navigation;\n","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/components/LoadingScreen.tsx",["82"],"import React from 'react';\nimport { Spinner } from '@blueprintjs/core';\n\nexport interface LoadingScreenProps {\n  name: string;\n  size?: number;\n}\n\nexport default function LoadingScreen(props: LoadingScreenProps) {\n  const { name, size } = props;\n  const spinnerSize = size != null ? size : 100;\n\n  return (\n    <>\n      <Spinner size={spinnerSize} intent=\"success\" />\n      <h1>Loading {name}...</h1>\n    </>\n  );\n}\n","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/features/home/Home.tsx",["83","84","85","86","87"],"import { IconName, Intent, NonIdealState } from '@blueprintjs/core';\nimport React, { ReactElement } from 'react';\nimport { useSelector } from 'react-redux';\nimport ContainerListItem from '../../components/ContainerListItem';\nimport {\n  checkApiStatus,\n  checkDockerStatus,\n  getApiStatus,\n  getDockerStatus,\n  Status,\n} from './HomeSlice';\n\ntype NoContainersFoundProps = {\n  icon: IconName;\n  description: ReactElement;\n  message: string;\n};\n\nfunction NoContainersFound(props: NoContainersFoundProps): ReactElement {\n  const { icon, description, message } = props;\n  return (\n    <NonIdealState icon={icon} title={message} description={description} />\n  );\n}\n\nexport const statusColor = (status: Status): Intent => {\n  switch (status) {\n    case Status.ON:\n      return 'success';\n    case Status.DEGRADED:\n      return 'warning';\n    case Status.OFF:\n      return 'danger';\n  }\n};\n\nexport const message = (status: Status): string => {\n  switch (status) {\n    case Status.ON:\n      return 'Ready';\n    case Status.DEGRADED:\n      return 'Degraded';\n    case Status.OFF:\n      return 'Off';\n  }\n};\n\nconst description = (\n  <>\n    You currently have no containers running.\n    <br />\n    Try creating a container in the <em>Create Container</em> tab.\n  </>\n);\n\nfunction HomeContainer() {\n  checkDockerStatus();\n  checkApiStatus();\n\n  const dockerStatus = useSelector(getDockerStatus);\n  const apiStatus = useSelector(getApiStatus);\n\n  return (\n    <div style={{ paddingTop: '1rem' }}>\n      {/*<NoContainersFound*/}\n      {/*  icon=\"cross\"*/}\n      {/*  description={description}*/}\n      {/*  message=\"No Containers Found\"*/}\n      {/*/>*/}\n      <ContainerListItem />\n    </div>\n  );\n}\n\nexport default HomeContainer;\n","/Users/ivanmartinezmorales/go/src/github.com/ivanmartinezmorales/dockernetes/frontend/src/components/ContainerListItem.tsx",["88","89","90","91"],{"ruleId":"92","severity":1,"message":"93","line":3,"column":25,"nodeType":"94","messageId":"95","endLine":3,"endColumn":57},{"ruleId":"92","severity":1,"message":"93","line":13,"column":27,"nodeType":"94","messageId":"95","endLine":13,"endColumn":48},{"ruleId":"92","severity":1,"message":"93","line":34,"column":32,"nodeType":"94","messageId":"95","endLine":34,"endColumn":61},{"ruleId":"92","severity":1,"message":"93","line":42,"column":35,"nodeType":"94","messageId":"95","endLine":42,"endColumn":56},{"ruleId":"92","severity":1,"message":"93","line":6,"column":16,"nodeType":"96","messageId":"95","endLine":6,"endColumn":60},{"ruleId":"92","severity":1,"message":"93","line":9,"column":23,"nodeType":"94","messageId":"95","endLine":9,"endColumn":40},{"ruleId":"92","severity":1,"message":"93","line":12,"column":14,"nodeType":"94","messageId":"95","endLine":12,"endColumn":45},{"ruleId":"97","severity":1,"message":"98","line":12,"column":37,"nodeType":"99","messageId":"100","endLine":12,"endColumn":40,"suggestions":"101"},{"ruleId":"92","severity":1,"message":"93","line":18,"column":3,"nodeType":"102","messageId":"95","endLine":18,"endColumn":18},{"ruleId":"92","severity":1,"message":"93","line":75,"column":32,"nodeType":"94","messageId":"95","endLine":75,"endColumn":53},{"ruleId":"92","severity":1,"message":"93","line":76,"column":29,"nodeType":"94","messageId":"95","endLine":76,"endColumn":50},{"ruleId":"103","severity":1,"message":"104","line":2,"column":10,"nodeType":"105","messageId":"106","endLine":2,"endColumn":17},{"ruleId":"92","severity":1,"message":"93","line":8,"column":16,"nodeType":"96","messageId":"95","endLine":8,"endColumn":45},{"ruleId":"92","severity":1,"message":"93","line":4,"column":1,"nodeType":"96","messageId":"95","endLine":4,"endColumn":20},{"ruleId":"103","severity":1,"message":"107","line":24,"column":23,"nodeType":"105","messageId":"106","endLine":24,"endColumn":30},{"ruleId":"103","severity":1,"message":"108","line":96,"column":9,"nodeType":"105","messageId":"106","endLine":96,"endColumn":25},{"ruleId":"92","severity":1,"message":"93","line":9,"column":16,"nodeType":"96","messageId":"95","endLine":9,"endColumn":65},{"ruleId":"103","severity":1,"message":"109","line":19,"column":10,"nodeType":"105","messageId":"106","endLine":19,"endColumn":27},{"ruleId":"103","severity":1,"message":"110","line":48,"column":7,"nodeType":"105","messageId":"106","endLine":48,"endColumn":18},{"ruleId":"92","severity":1,"message":"93","line":56,"column":1,"nodeType":"96","messageId":"95","endLine":56,"endColumn":25},{"ruleId":"103","severity":1,"message":"111","line":60,"column":9,"nodeType":"105","messageId":"106","endLine":60,"endColumn":21},{"ruleId":"103","severity":1,"message":"112","line":61,"column":9,"nodeType":"105","messageId":"106","endLine":61,"endColumn":18},{"ruleId":"113","severity":2,"message":"114","line":21,"column":20,"nodeType":"105","messageId":"115","endLine":21,"endColumn":28},{"ruleId":"103","severity":1,"message":"116","line":24,"column":10,"nodeType":"105","messageId":"106","endLine":24,"endColumn":25},{"ruleId":"103","severity":1,"message":"117","line":25,"column":11,"nodeType":"105","messageId":"106","endLine":25,"endColumn":22},{"ruleId":"92","severity":1,"message":"93","line":40,"column":3,"nodeType":"102","messageId":"95","endLine":40,"endColumn":11},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionDeclaration","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["118","119"],"FunctionExpression","@typescript-eslint/no-unused-vars","'Classes' is defined but never used.","Identifier","unusedVar","'message' is defined but never used.","'ConnectionStatus' is assigned a value but never used.","'NoContainersFound' is defined but never used.","'description' is assigned a value but never used.","'dockerStatus' is assigned a value but never used.","'apiStatus' is assigned a value but never used.","@typescript-eslint/ban-types","Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","bannedTypeMessage","'ContainerButton' is defined but never used.","'containerId' is assigned a value but never used.",{"messageId":"120","fix":"121","desc":"122"},{"messageId":"123","fix":"124","desc":"125"},"suggestUnknown",{"range":"126","text":"127"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"126","text":"128"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[499,502],"unknown","never"]